"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chain = chain;
exports.compact = void 0;
exports.difference = difference;
exports.every = exports.empty = exports.elem = void 0;
exports.filter = filter;
exports.filterMap = filterMap;
exports.getUnionSemigroup = exports.getUnionMonoid = exports.getShow = exports.getIntersectionSemigroup = exports.getEq = exports.getDifferenceMagma = exports.fromArray = exports.foldMap = void 0;
exports.insert = insert;
exports.intersection = intersection;
exports.isSubset = exports.isEmpty = void 0;
exports.map = map;
exports.partition = partition;
exports.partitionMap = partitionMap;
exports.remove = exports.reduceRight = exports.reduce = void 0;
exports.separate = separate;
exports.toggle = exports.toArray = exports.subset = exports.some = exports.size = exports.singleton = void 0;
exports.union = union;

var _function = require("./function");

var RS = _interopRequireWildcard(require("./ReadonlySet"));

var _Separated = require("./Separated");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @since 2.0.0
 */

/**
 * @category instances
 * @since 2.0.0
 */
var getShow = RS.getShow;
/**
 * @category instances
 * @since 2.0.0
 */

exports.getShow = getShow;
var getEq = RS.getEq;
/**
 * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
 * use the type constructor `F` to represent some computational context.
 *
 * @category combinators
 * @since 2.0.0
 */

exports.getEq = getEq;

function map(E) {
  var elemE = elem(E);
  return function (f) {
    return function (set) {
      var r = new Set();
      set.forEach(function (e) {
        var v = f(e);

        if (!elemE(v, r)) {
          r.add(v);
        }
      });
      return r;
    };
  };
}
/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category combinators
 * @since 2.0.0
 */


function chain(E) {
  var elemE = elem(E);
  return function (f) {
    return function (set) {
      var r = new Set();
      set.forEach(function (e) {
        f(e).forEach(function (e) {
          if (!elemE(e, r)) {
            r.add(e);
          }
        });
      });
      return r;
    };
  };
}

function filter(predicate) {
  return function (set) {
    var values = set.values();
    var e;
    var r = new Set(); // tslint:disable-next-line: strict-boolean-expressions

    while (!(e = values.next()).done) {
      var _a = e.value;

      if (predicate(_a)) {
        r.add(_a);
      }
    }

    return r;
  };
}
/**
 * @since 2.0.0
 */


function partition(predicate) {
  return function (set) {
    var values = set.values();
    var e;
    var right = new Set();
    var left = new Set(); // tslint:disable-next-line: strict-boolean-expressions

    while (!(e = values.next()).done) {
      var _a2 = e.value;

      if (predicate(_a2)) {
        right.add(_a2);
      } else {
        left.add(_a2);
      }
    }

    return (0, _Separated.separated)(left, right);
  };
} // TODO: remove non-curried overloading in v3

/**
 * Form the union of two sets
 *
 * @category combinators
 * @since 2.0.0
 */


function union(E) {
  var elemE = elem(E);
  return function (me, that) {
    if (that === undefined) {
      var unionE = union(E);
      return function (that) {
        return unionE(me, that);
      };
    }

    if (isEmpty(me)) {
      return that;
    }

    if (isEmpty(that)) {
      return me;
    }

    var r = new Set(me);
    that.forEach(function (e) {
      if (!elemE(e, r)) {
        r.add(e);
      }
    });
    return r;
  };
} // TODO: remove non-curried overloading in v3

/**
 * The set of elements which are in both the first and second set
 *
 * @category combinators
 * @since 2.0.0
 */


function intersection(E) {
  var elemE = elem(E);
  return function (me, that) {
    if (that === undefined) {
      var intersectionE = intersection(E);
      return function (that) {
        return intersectionE(that, me);
      };
    }

    if (isEmpty(me) || isEmpty(that)) {
      return new Set();
    }

    var r = new Set();
    me.forEach(function (e) {
      if (elemE(e, that)) {
        r.add(e);
      }
    });
    return r;
  };
}
/**
 * @since 2.0.0
 */


function partitionMap(EB, EC) {
  return function (f) {
    return function (set) {
      var values = set.values();
      var e;
      var left = new Set();
      var right = new Set();
      var hasB = elem(EB);
      var hasC = elem(EC); // tslint:disable-next-line: strict-boolean-expressions

      while (!(e = values.next()).done) {
        var v = f(e.value);

        switch (v._tag) {
          case 'Left':
            if (!hasB(v.left, left)) {
              left.add(v.left);
            }

            break;

          case 'Right':
            if (!hasC(v.right, right)) {
              right.add(v.right);
            }

            break;
        }
      }

      return (0, _Separated.separated)(left, right);
    };
  };
} // TODO: remove non-curried overloading in v3

/**
 * Form the set difference (`x` - `y`)
 *
 * @example
 * import { difference } from 'fp-ts/Set'
 * import * as N from 'fp-ts/number'
 * import { pipe } from 'fp-ts/function'
 *
 * assert.deepStrictEqual(pipe(new Set([1, 2]), difference(N.Eq)(new Set([1, 3]))), new Set([2]))
 *
 * @category combinators
 * @since 2.0.0
 */


function difference(E) {
  var elemE = elem(E);
  return function (me, that) {
    if (that === undefined) {
      var differenceE = difference(E);
      return function (that) {
        return differenceE(that, me);
      };
    }

    return filter(function (a) {
      return !elemE(a, that);
    })(me);
  };
}
/**
 * @category instances
 * @since 2.11.0
 */


var getUnionSemigroup = function getUnionSemigroup(E) {
  return {
    concat: union(E)
  };
};
/**
 * @category instances
 * @since 2.0.0
 */


exports.getUnionSemigroup = getUnionSemigroup;

var getUnionMonoid = function getUnionMonoid(E) {
  return {
    concat: getUnionSemigroup(E).concat,
    empty: new Set()
  };
};
/**
 * @category instances
 * @since 2.0.0
 */


exports.getUnionMonoid = getUnionMonoid;

var getIntersectionSemigroup = function getIntersectionSemigroup(E) {
  return {
    concat: intersection(E)
  };
};
/**
 * @category instances
 * @since 2.11.0
 */


exports.getIntersectionSemigroup = getIntersectionSemigroup;

var getDifferenceMagma = function getDifferenceMagma(E) {
  return {
    concat: difference(E)
  };
};
/**
 * @since 2.0.0
 */


exports.getDifferenceMagma = getDifferenceMagma;
var reduce = RS.reduce;
/**
 * @since 2.0.0
 */

exports.reduce = reduce;
var foldMap = RS.foldMap;
/**
 * @since 2.11.0
 */

exports.foldMap = foldMap;
var reduceRight = RS.reduceRight;
/**
 * Create a set with one element
 *
 * @category constructors
 * @since 2.0.0
 */

exports.reduceRight = reduceRight;

var singleton = function singleton(a) {
  return new Set([a]);
};
/**
 * Insert a value into a set
 *
 * @category combinators
 * @since 2.0.0
 */


exports.singleton = singleton;

function insert(E) {
  var elemE = elem(E);
  return function (a) {
    return function (set) {
      if (!elemE(a)(set)) {
        var r = new Set(set);
        r.add(a);
        return r;
      } else {
        return set;
      }
    };
  };
}
/**
 * Delete a value from a set
 *
 * @category combinators
 * @since 2.0.0
 */


var remove = function remove(E) {
  return function (a) {
    return function (set) {
      return filter(function (ax) {
        return !E.equals(a, ax);
      })(set);
    };
  };
};
/**
 * Checks an element is a member of a set;
 * If yes, removes the value from the set
 * If no, inserts the value to the set
 *
 * @category combinators
 * @since 2.5.0
 */


exports.remove = remove;

var toggle = function toggle(E) {
  var elemE = elem(E);
  var removeE = remove(E);
  var insertE = insert(E);
  return function (a) {
    return function (set) {
      return (elemE(a, set) ? removeE : insertE)(a)(set);
    };
  };
};
/**
 * Create a set from an array
 *
 * @category constructors
 * @since 2.0.0
 */


exports.toggle = toggle;

var fromArray = function fromArray(E) {
  return function (as) {
    var len = as.length;
    var out = new Set();
    var has = elem(E);

    for (var i = 0; i < len; i++) {
      var _a3 = as[i];

      if (!has(_a3, out)) {
        out.add(_a3);
      }
    }

    return out;
  };
};
/**
 * @category combinators
 * @since 2.0.0
 */


exports.fromArray = fromArray;

var compact = function compact(E) {
  return filterMap(E)(_function.identity);
};
/**
 * @since 2.0.0
 */


exports.compact = compact;

function separate(EE, EA) {
  return function (fa) {
    var elemEE = elem(EE);
    var elemEA = elem(EA);
    var left = new Set();
    var right = new Set();
    fa.forEach(function (e) {
      switch (e._tag) {
        case 'Left':
          if (!elemEE(e.left, left)) {
            left.add(e.left);
          }

          break;

        case 'Right':
          if (!elemEA(e.right, right)) {
            right.add(e.right);
          }

          break;
      }
    });
    return (0, _Separated.separated)(left, right);
  };
}
/**
 * @category combinators
 * @since 2.0.0
 */


function filterMap(E) {
  var elemE = elem(E);
  return function (f) {
    return function (fa) {
      var r = new Set();
      fa.forEach(function (a) {
        var ob = f(a);

        if (ob._tag === 'Some' && !elemE(ob.value, r)) {
          r.add(ob.value);
        }
      });
      return r;
    };
  };
} // -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * @since 2.0.0
 */


var empty = new Set();
/**
 * Test whether a `Set` is empty.
 *
 * @since 2.10.0
 */

exports.empty = empty;

var isEmpty = function isEmpty(set) {
  return set.size === 0;
};
/**
 * Calculate the number of elements in a `Set`.
 *
 * @since 2.10.0
 */


exports.isEmpty = isEmpty;

var size = function size(set) {
  return set.size;
};
/**
 * @since 2.0.0
 */


exports.size = size;
var some = RS.some;
/**
 * @since 2.0.0
 */

exports.some = some;
var every = RS.every;
/**
 * @since 2.10.0
 */

exports.every = every;
var isSubset = RS.isSubset; // TODO: remove non-curried overloading in v3

/**
 * Test if a value is a member of a set
 *
 * @since 2.0.0
 */

exports.isSubset = isSubset;
var elem = RS.elem;
/**
 * Get a sorted `Array` of the values contained in a `Set`.
 *
 * @since 2.0.0
 */

exports.elem = elem;

var toArray = function toArray(O) {
  return function (set) {
    var out = [];
    set.forEach(function (e) {
      return out.push(e);
    });
    return out.sort(O.compare);
  };
}; // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use [`isSubset`](#issubset) instead.
 *
 * @since 2.0.0
 * @deprecated
 */


exports.toArray = toArray;
var subset = RS.isSubset;
exports.subset = subset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,