"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compact = compact;
exports.getCompactableComposition = getCompactableComposition;
exports.separate = separate;

var _function = require("./function");

var _Functor = require("./Functor");

var _Option = require("./Option");

var S = _interopRequireWildcard(require("./Separated"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * `Compactable` represents data structures which can be _compacted_/_filtered_. This is a generalization of
 * `catOptions` as a new function `compact`. `compact` has relations with `Functor`, `Applicative`,
 * `Monad`, `Alternative`, and `Traversable` in that we can use these classes to provide the ability to
 * operate on a data type by eliminating intermediate `None`s. This is useful for representing the filtering out of
 * values, or failure.
 *
 * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Compactable.purs
 *
 * @since 2.0.0
 */
function compact(F, G) {
  return function (fga) {
    return F.map(fga, G.compact);
  };
}
/**
 * `separate` composition.
 *
 * @category combinators
 * @since 2.10.0
 */


function separate(F, C, G) {
  var _compact = compact(F, C);

  var _map = (0, _Functor.map)(F, G);

  return function (fge) {
    return S.separated(_compact((0, _function.pipe)(fge, _map(_Option.getLeft))), _compact((0, _function.pipe)(fge, _map(_Option.getRight))));
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------
// tslint:disable: deprecation

/**
 * @since 2.0.0
 * @deprecated
 */


/** @deprecated */
function getCompactableComposition(F, G) {
  var map = (0, _Functor.getFunctorComposition)(F, G).map;
  return {
    map: map,
    compact: compact(F, G),
    separate: separate(F, G, G)
  };
}
/**
 * Use [`Separated`](./Separated.ts.html#separated) instead.
 *
 * @since 2.0.0
 * @deprecated
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,