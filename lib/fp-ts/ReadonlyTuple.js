"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.foldMap = exports.flap = exports.extract = exports.extend = exports.duplicate = exports.compose = exports.bimap = exports.URI = exports.Traversable = exports.Semigroupoid = exports.Functor = exports.Foldable = exports.Comonad = exports.Bifunctor = void 0;
exports.fst = fst;
exports.getApplicative = getApplicative;
exports.getApply = getApply;
exports.getChain = getChain;
exports.getChainRec = getChainRec;
exports.getMonad = getMonad;
exports.sequence = exports.reduceRight = exports.reduce = exports.readonlyTuple = exports.mapSnd = exports.mapLeft = exports.mapFst = exports.map = void 0;
exports.snd = snd;
exports.traverse = exports.swap = void 0;

var _function = require("./function");

var _Functor = require("./Functor");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// -------------------------------------------------------------------------------------
// model
// -------------------------------------------------------------------------------------

/**
 * @category destructors
 * @since 2.5.0
 */
function fst(ea) {
  return ea[0];
}
/**
 * @category destructors
 * @since 2.5.0
 */


function snd(ea) {
  return ea[1];
}
/**
 * @category combinators
 * @since 2.5.0
 */


var swap = function swap(ea) {
  return [snd(ea), fst(ea)];
};
/**
 * @category instances
 * @since 2.5.0
 */


exports.swap = swap;

function getApply(S) {
  return {
    URI: URI,
    _E: undefined,
    map: _map,
    ap: function ap(fab, fa) {
      return [fst(fab)(fst(fa)), S.concat(snd(fab), snd(fa))];
    }
  };
}

var of = function of(M) {
  return function (a) {
    return [a, M.empty];
  };
};
/**
 * @category instances
 * @since 2.5.0
 */


function getApplicative(M) {
  var A = getApply(M);
  return {
    URI: URI,
    _E: undefined,
    map: A.map,
    ap: A.ap,
    of: of(M)
  };
}
/**
 * @category instances
 * @since 2.5.0
 */


function getChain(S) {
  var A = getApply(S);
  return {
    URI: URI,
    _E: undefined,
    map: A.map,
    ap: A.ap,
    chain: function chain(ma, f) {
      var _f = f(fst(ma)),
          _f2 = _slicedToArray(_f, 2),
          b = _f2[0],
          s = _f2[1];

      return [b, S.concat(snd(ma), s)];
    }
  };
}
/**
 * @category instances
 * @since 2.5.0
 */


function getMonad(M) {
  var C = getChain(M);
  return {
    URI: URI,
    _E: undefined,
    map: C.map,
    ap: C.ap,
    chain: C.chain,
    of: of(M)
  };
}
/**
 * @category instances
 * @since 2.5.0
 */


function getChainRec(M) {
  var chainRec = function chainRec(a, f) {
    var result = f(a);
    var acc = M.empty;
    var s = fst(result);

    while (s._tag === 'Left') {
      acc = M.concat(acc, snd(result));
      result = f(s.left);
      s = fst(result);
    }

    return [s.right, M.concat(acc, snd(result))];
  };

  var C = getChain(M);
  return {
    URI: URI,
    _E: undefined,
    map: C.map,
    ap: C.ap,
    chain: C.chain,
    chainRec: chainRec
  };
} // -------------------------------------------------------------------------------------
// non-pipeables
// -------------------------------------------------------------------------------------

/* istanbul ignore next */


var _compose = function _compose(bc, ab) {
  return (0, _function.pipe)(bc, compose(ab));
};
/* istanbul ignore next */


var _map = function _map(fa, f) {
  return (0, _function.pipe)(fa, mapFst(f));
};
/* istanbul ignore next */


var _bimap = function _bimap(fa, f, g) {
  return (0, _function.pipe)(fa, bimap(f, g));
};
/* istanbul ignore next */


var _mapLeft = function _mapLeft(fa, f) {
  return (0, _function.pipe)(fa, mapSnd(f));
};
/* istanbul ignore next */


var _extend = function _extend(wa, f) {
  return (0, _function.pipe)(wa, extend(f));
};
/* istanbul ignore next */


var _reduce = function _reduce(fa, b, f) {
  return (0, _function.pipe)(fa, reduce(b, f));
};
/* istanbul ignore next */


var _foldMap = function _foldMap(M) {
  var foldMapM = foldMap(M);
  return function (fa, f) {
    return (0, _function.pipe)(fa, foldMapM(f));
  };
};
/* istanbul ignore next */


var _reduceRight = function _reduceRight(fa, b, f) {
  return (0, _function.pipe)(fa, reduceRight(b, f));
};
/* istanbul ignore next */


var _traverse = function _traverse(F) {
  var traverseF = traverse(F);
  return function (ta, f) {
    return (0, _function.pipe)(ta, traverseF(f));
  };
}; // -------------------------------------------------------------------------------------
// type class members
// -------------------------------------------------------------------------------------

/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.5.0
 */


var bimap = function bimap(f, g) {
  return function (fa) {
    return [g(fst(fa)), f(snd(fa))];
  };
};
/**
 * Map a function over the first component of a `ReadonlyTuple`.
 *
 * This is the `map` operation of the `Functor` instance.
 *
 * @category Functor
 * @since 2.10.0
 */


exports.bimap = bimap;

var mapFst = function mapFst(f) {
  return function (fa) {
    return [f(fst(fa)), snd(fa)];
  };
};
/**
 * Map a function over the second component of a `ReadonlyTuple`.
 *
 * This is the `mapLeft` operation of the `Bifunctor` instance.
 *
 * @category Bifunctor
 * @since 2.10.0
 */


exports.mapFst = mapFst;

var mapSnd = function mapSnd(f) {
  return function (fa) {
    return [fst(fa), f(snd(fa))];
  };
};
/**
 * @category Semigroupoid
 * @since 2.5.0
 */


exports.mapSnd = mapSnd;

var compose = function compose(ab) {
  return function (bc) {
    return [fst(bc), snd(ab)];
  };
};
/**
 * @category Extend
 * @since 2.5.0
 */


exports.compose = compose;

var extend = function extend(f) {
  return function (wa) {
    return [f(wa), snd(wa)];
  };
};
/**
 * @category Extract
 * @since 2.6.2
 */


exports.extend = extend;
var extract = fst;
/**
 * Derivable from `Extend`.
 *
 * @category combinators
 * @since 2.5.0
 */

exports.extract = extract;
var duplicate = /*#__PURE__*/extend(_function.identity);
/**
 * @category Foldable
 * @since 2.5.0
 */

exports.duplicate = duplicate;

var reduce = function reduce(b, f) {
  return function (fa) {
    return f(b, fst(fa));
  };
};
/**
 * @category Foldable
 * @since 2.5.0
 */


exports.reduce = reduce;

var foldMap = function foldMap() {
  return function (f) {
    return function (fa) {
      return f(fst(fa));
    };
  };
};
/**
 * @category Foldable
 * @since 2.5.0
 */


exports.foldMap = foldMap;

var reduceRight = function reduceRight(b, f) {
  return function (fa) {
    return f(fst(fa), b);
  };
};
/**
 * @since 2.6.3
 */


exports.reduceRight = reduceRight;

var traverse = function traverse(F) {
  return function (f) {
    return function (ta) {
      return F.map(f(fst(ta)), function (b) {
        return [b, snd(ta)];
      });
    };
  };
};
/**
 * @since 2.6.3
 */


exports.traverse = traverse;

var sequence = function sequence(F) {
  return function (fas) {
    return F.map(fst(fas), function (a) {
      return [a, snd(fas)];
    });
  };
}; // -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------

/**
 * @category instances
 * @since 2.5.0
 */


exports.sequence = sequence;
var URI = 'ReadonlyTuple';
/**
 * @category instances
 * @since 2.5.0
 */

exports.URI = URI;

/**
 * @category instances
 * @since 2.7.0
 */
var Functor = {
  URI: URI,
  map: _map
};
/**
 * Derivable from `Functor`.
 *
 * @category combinators
 * @since 2.10.0
 */

exports.Functor = Functor;
var flap = /*#__PURE__*/(0, _Functor.flap)(Functor);
/**
 * @category instances
 * @since 2.7.0
 */

exports.flap = flap;
var Bifunctor = {
  URI: URI,
  bimap: _bimap,
  mapLeft: _mapLeft
};
/**
 * @category instances
 * @since 2.7.0
 */

exports.Bifunctor = Bifunctor;
var Semigroupoid = {
  URI: URI,
  compose: _compose
};
/**
 * @category instances
 * @since 2.7.0
 */

exports.Semigroupoid = Semigroupoid;
var Comonad = {
  URI: URI,
  map: _map,
  extend: _extend,
  extract: extract
};
/**
 * @category instances
 * @since 2.7.0
 */

exports.Comonad = Comonad;
var Foldable = {
  URI: URI,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight
};
/**
 * @category instances
 * @since 2.7.0
 */

exports.Foldable = Foldable;
var Traversable = {
  URI: URI,
  map: _map,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence: sequence
}; // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use [`mapFst`](#mapfst) instead.
 *
 * @since 2.5.0
 * @deprecated
 */

exports.Traversable = Traversable;
var map = mapFst;
/**
 * Use [`mapSnd`](#mapsnd) instead.
 *
 * @since 2.5.0
 * @deprecated
 */

exports.map = map;
var mapLeft = mapSnd;
/**
 * Use small, specific instances instead.
 *
 * @category instances
 * @since 2.5.0
 * @deprecated
 */

exports.mapLeft = mapLeft;
var readonlyTuple = {
  URI: URI,
  compose: _compose,
  map: _map,
  bimap: _bimap,
  mapLeft: _mapLeft,
  extract: extract,
  extend: _extend,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence: sequence
};
exports.readonlyTuple = readonlyTuple;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,