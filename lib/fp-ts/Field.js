"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fieldNumber = void 0;
exports.gcd = gcd;
exports.lcm = lcm;

/**
 * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Field.purs
 *
 * @since 2.0.0
 */
// -------------------------------------------------------------------------------------
// model
// -------------------------------------------------------------------------------------

/**
 * @category type classes
 * @since 2.0.0
 */
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * The *greatest common divisor* of two values
 *
 * @since 2.0.0
 */
function gcd(E, field) {
  var zero = field.zero;

  var f = function f(x, y) {
    return E.equals(y, zero) ? x : f(y, field.mod(x, y));
  };

  return f;
}
/**
 * The *least common multiple* of two values
 *
 * @since 2.0.0
 */


function lcm(E, F) {
  var zero = F.zero;
  var gcdSF = gcd(E, F);
  return function (x, y) {
    return E.equals(x, zero) || E.equals(y, zero) ? zero : F.div(F.mul(x, y), gcdSF(x, y));
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use [`Field`](./number.ts.html#field) instead.
 *
 * @category instances
 * @since 2.0.0
 * @deprecated
 */


var fieldNumber = {
  add: function add(x, y) {
    return x + y;
  },
  zero: 0,
  mul: function mul(x, y) {
    return x * y;
  },
  one: 1,
  sub: function sub(x, y) {
    return x - y;
  },
  degree: function degree(_) {
    return 1;
  },
  div: function div(x, y) {
    return x / y;
  },
  mod: function mod(x, y) {
    return x % y;
  }
};
exports.fieldNumber = fieldNumber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcC10cy9GaWVsZC50cyJdLCJuYW1lcyI6WyJnY2QiLCJFIiwiZmllbGQiLCJ6ZXJvIiwiZiIsIngiLCJ5IiwiZXF1YWxzIiwibW9kIiwibGNtIiwiRiIsImdjZFNGIiwiZGl2IiwibXVsIiwiZmllbGROdW1iZXIiLCJhZGQiLCJvbmUiLCJzdWIiLCJkZWdyZWUiLCJfIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxHQUFULENBQWdCQyxDQUFoQixFQUEwQkMsS0FBMUIsRUFBOEQ7QUFDbkUsTUFBTUMsSUFBSSxHQUFHRCxLQUFLLENBQUNDLElBQW5COztBQUNBLE1BQU1DLENBQUMsR0FBRyxTQUFKQSxDQUFJLENBQUNDLENBQUQsRUFBT0MsQ0FBUDtBQUFBLFdBQW9CTCxDQUFDLENBQUNNLE1BQUYsQ0FBU0QsQ0FBVCxFQUFZSCxJQUFaLElBQW9CRSxDQUFwQixHQUF3QkQsQ0FBQyxDQUFDRSxDQUFELEVBQUlKLEtBQUssQ0FBQ00sR0FBTixDQUFVSCxDQUFWLEVBQWFDLENBQWIsQ0FBSixDQUE3QztBQUFBLEdBQVY7O0FBQ0EsU0FBT0YsQ0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0ssR0FBVCxDQUFnQlIsQ0FBaEIsRUFBMEJTLENBQTFCLEVBQTBEO0FBQy9ELE1BQU1QLElBQUksR0FBR08sQ0FBQyxDQUFDUCxJQUFmO0FBQ0EsTUFBTVEsS0FBSyxHQUFHWCxHQUFHLENBQUNDLENBQUQsRUFBSVMsQ0FBSixDQUFqQjtBQUNBLFNBQU8sVUFBQ0wsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBV0wsQ0FBQyxDQUFDTSxNQUFGLENBQVNGLENBQVQsRUFBWUYsSUFBWixLQUFxQkYsQ0FBQyxDQUFDTSxNQUFGLENBQVNELENBQVQsRUFBWUgsSUFBWixDQUFyQixHQUF5Q0EsSUFBekMsR0FBZ0RPLENBQUMsQ0FBQ0UsR0FBRixDQUFNRixDQUFDLENBQUNHLEdBQUYsQ0FBTVIsQ0FBTixFQUFTQyxDQUFULENBQU4sRUFBbUJLLEtBQUssQ0FBQ04sQ0FBRCxFQUFJQyxDQUFKLENBQXhCLENBQTNEO0FBQUEsR0FBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLElBQU1RLFdBQTBCLEdBQUc7QUFDeENDLEVBQUFBLEdBQUcsRUFBRSxhQUFDVixDQUFELEVBQUlDLENBQUo7QUFBQSxXQUFVRCxDQUFDLEdBQUdDLENBQWQ7QUFBQSxHQURtQztBQUV4Q0gsRUFBQUEsSUFBSSxFQUFFLENBRmtDO0FBR3hDVSxFQUFBQSxHQUFHLEVBQUUsYUFBQ1IsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBVUQsQ0FBQyxHQUFHQyxDQUFkO0FBQUEsR0FIbUM7QUFJeENVLEVBQUFBLEdBQUcsRUFBRSxDQUptQztBQUt4Q0MsRUFBQUEsR0FBRyxFQUFFLGFBQUNaLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVELENBQUMsR0FBR0MsQ0FBZDtBQUFBLEdBTG1DO0FBTXhDWSxFQUFBQSxNQUFNLEVBQUUsZ0JBQUNDLENBQUQ7QUFBQSxXQUFPLENBQVA7QUFBQSxHQU5nQztBQU94Q1AsRUFBQUEsR0FBRyxFQUFFLGFBQUNQLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVELENBQUMsR0FBR0MsQ0FBZDtBQUFBLEdBUG1DO0FBUXhDRSxFQUFBQSxHQUFHLEVBQUUsYUFBQ0gsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBVUQsQ0FBQyxHQUFHQyxDQUFkO0FBQUE7QUFSbUMsQ0FBbkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcHVyZXNjcmlwdC9wdXJlc2NyaXB0LXByZWx1ZGUvYmxvYi9tYXN0ZXIvc3JjL0RhdGEvRmllbGQucHVyc1xuICpcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5pbXBvcnQgeyBSaW5nIH0gZnJvbSAnLi9SaW5nJ1xuaW1wb3J0IHsgRXEgfSBmcm9tICcuL0VxJ1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBtb2RlbFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGNsYXNzZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkPEE+IGV4dGVuZHMgUmluZzxBPiB7XG4gIHJlYWRvbmx5IGRlZ3JlZTogKGE6IEEpID0+IG51bWJlclxuICByZWFkb25seSBkaXY6ICh4OiBBLCB5OiBBKSA9PiBBXG4gIHJlYWRvbmx5IG1vZDogKHg6IEEsIHk6IEEpID0+IEFcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gdXRpbHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBUaGUgKmdyZWF0ZXN0IGNvbW1vbiBkaXZpc29yKiBvZiB0d28gdmFsdWVzXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnY2Q8QT4oRTogRXE8QT4sIGZpZWxkOiBGaWVsZDxBPik6ICh4OiBBLCB5OiBBKSA9PiBBIHtcbiAgY29uc3QgemVybyA9IGZpZWxkLnplcm9cbiAgY29uc3QgZiA9ICh4OiBBLCB5OiBBKTogQSA9PiAoRS5lcXVhbHMoeSwgemVybykgPyB4IDogZih5LCBmaWVsZC5tb2QoeCwgeSkpKVxuICByZXR1cm4gZlxufVxuXG4vKipcbiAqIFRoZSAqbGVhc3QgY29tbW9uIG11bHRpcGxlKiBvZiB0d28gdmFsdWVzXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsY208QT4oRTogRXE8QT4sIEY6IEZpZWxkPEE+KTogKHg6IEEsIHk6IEEpID0+IEEge1xuICBjb25zdCB6ZXJvID0gRi56ZXJvXG4gIGNvbnN0IGdjZFNGID0gZ2NkKEUsIEYpXG4gIHJldHVybiAoeCwgeSkgPT4gKEUuZXF1YWxzKHgsIHplcm8pIHx8IEUuZXF1YWxzKHksIHplcm8pID8gemVybyA6IEYuZGl2KEYubXVsKHgsIHkpLCBnY2RTRih4LCB5KSkpXG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGRlcHJlY2F0ZWRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBVc2UgW2BGaWVsZGBdKC4vbnVtYmVyLnRzLmh0bWwjZmllbGQpIGluc3RlYWQuXG4gKlxuICogQGNhdGVnb3J5IGluc3RhbmNlc1xuICogQHNpbmNlIDIuMC4wXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgY29uc3QgZmllbGROdW1iZXI6IEZpZWxkPG51bWJlcj4gPSB7XG4gIGFkZDogKHgsIHkpID0+IHggKyB5LFxuICB6ZXJvOiAwLFxuICBtdWw6ICh4LCB5KSA9PiB4ICogeSxcbiAgb25lOiAxLFxuICBzdWI6ICh4LCB5KSA9PiB4IC0geSxcbiAgZGVncmVlOiAoXykgPT4gMSxcbiAgZGl2OiAoeCwgeSkgPT4geCAvIHksXG4gIG1vZDogKHgsIHkpID0+IHggJSB5XG59XG4iXX0=