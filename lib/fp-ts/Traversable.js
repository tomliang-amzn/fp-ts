"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTraversableComposition = getTraversableComposition;
exports.sequence = sequence;
exports.traverse = traverse;

var _Foldable = require("./Foldable");

var _function = require("./function");

var _Functor = require("./Functor");

/**
 * `Traversable` represents data structures which can be _traversed_ accumulating results and effects in some
 * `Applicative` functor.
 *
 * - `traverse` runs an action for every element in a data structure, and accumulates the results.
 * - `sequence` runs the actions _contained_ in a data structure, and accumulates the results.
 *
 * The `traverse` and `sequence` functions should be compatible in the following sense:
 *
 * - `traverse(A)(xs, f) <-> sequence(A)(A.map(xs, f))`
 * - `sequence(A)(xs) <-> traverse(A)(xs, identity)`
 *
 * where `A` is an `Applicative` instance
 *
 * `Traversable` instances should also be compatible with the corresponding `Foldable` instances, in the following sense:
 *
 * ```ts
 * import { getApplicative, make } from 'fp-ts/Const'
 *
 * const A = getApplicative(M)
 *
 * foldMap(M)(xs, f) = traverse(A)(xs, a => make(f(a)))
 * ```
 *
 * where `M` is a `Monoid` instance
 *
 * @since 2.0.0
 */
function traverse(T, G) {
  return function (F) {
    var traverseT = T.traverse(F);
    var traverseG = G.traverse(F);
    return function (f) {
      return function (fga) {
        return traverseT(fga, function (ga) {
          return traverseG(ga, f);
        });
      };
    };
  };
}
/**
 * `sequence` composition.
 *
 * @category combinators
 * @since 2.10.0
 */


function sequence(T, G) {
  return function (F) {
    var sequenceT = T.sequence(F);
    var sequenceG = G.sequence(F);
    return function (fgha) {
      return sequenceT(T.map(fgha, sequenceG));
    };
  };
} //
// pipeable `Traverse`
//

/**
 * @since 2.6.3
 */


/** @deprecated */
function getTraversableComposition(F, G) {
  var map = (0, _Functor.getFunctorComposition)(F, G).map;
  var FC = (0, _Foldable.getFoldableComposition)(F, G);

  var _traverse = traverse(F, G);

  var _sequence = sequence(F, G);

  return {
    map: map,
    reduce: FC.reduce,
    foldMap: FC.foldMap,
    reduceRight: FC.reduceRight,
    traverse: function traverse(H) {
      var traverseH = _traverse(H);

      return function (fga, f) {
        return (0, _function.pipe)(fga, traverseH(f));
      };
    },
    sequence: function sequence(H) {
      var sequenceH = _sequence(H);

      return function (fgha) {
        return (0, _function.pipe)(fgha, sequenceH);
      };
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,