"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.altAll = altAll;

var _Alt = require("./Alt");

/**
 * The `Alternative` type class extends the `Alt` type class with a value that should be the left and right identity for `alt`.
 *
 * It is similar to `Monoid`, except that it applies to types of kind `* -> *`, like `Array` or `Option`, rather than
 * concrete types like `string` or `number`.
 *
 * `Alternative` instances should satisfy the following laws:
 *
 * 1. Left identity: `A.alt(zero, fa) <-> fa`
 * 2. Right identity: `A.alt(fa, zero) <-> fa`
 * 3. Annihilation: `A.map(zero, f) <-> zero`
 * 4. Distributivity: `A.ap(A.alt(fab, gab), fa) <-> A.alt(A.ap(fab, fa), A.ap(gab, fa))`
 * 5. Annihilation: `A.ap(zero, fa) <-> zero`
 *
 * @since 2.0.0
 */
function altAll(F) {
  return (0, _Alt.altAll)(F)(F.zero());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcC10cy9BbHRlcm5hdGl2ZS50cyJdLCJuYW1lcyI6WyJhbHRBbGwiLCJGIiwiemVybyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWdCQTs7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrRk8sU0FBU0EsTUFBVCxDQUFtQkMsQ0FBbkIsRUFBc0Y7QUFDM0YsU0FBTyxpQkFBUUEsQ0FBUixFQUFXQSxDQUFDLENBQUNDLElBQUYsRUFBWCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBgQWx0ZXJuYXRpdmVgIHR5cGUgY2xhc3MgZXh0ZW5kcyB0aGUgYEFsdGAgdHlwZSBjbGFzcyB3aXRoIGEgdmFsdWUgdGhhdCBzaG91bGQgYmUgdGhlIGxlZnQgYW5kIHJpZ2h0IGlkZW50aXR5IGZvciBgYWx0YC5cbiAqXG4gKiBJdCBpcyBzaW1pbGFyIHRvIGBNb25vaWRgLCBleGNlcHQgdGhhdCBpdCBhcHBsaWVzIHRvIHR5cGVzIG9mIGtpbmQgYCogLT4gKmAsIGxpa2UgYEFycmF5YCBvciBgT3B0aW9uYCwgcmF0aGVyIHRoYW5cbiAqIGNvbmNyZXRlIHR5cGVzIGxpa2UgYHN0cmluZ2Agb3IgYG51bWJlcmAuXG4gKlxuICogYEFsdGVybmF0aXZlYCBpbnN0YW5jZXMgc2hvdWxkIHNhdGlzZnkgdGhlIGZvbGxvd2luZyBsYXdzOlxuICpcbiAqIDEuIExlZnQgaWRlbnRpdHk6IGBBLmFsdCh6ZXJvLCBmYSkgPC0+IGZhYFxuICogMi4gUmlnaHQgaWRlbnRpdHk6IGBBLmFsdChmYSwgemVybykgPC0+IGZhYFxuICogMy4gQW5uaWhpbGF0aW9uOiBgQS5tYXAoemVybywgZikgPC0+IHplcm9gXG4gKiA0LiBEaXN0cmlidXRpdml0eTogYEEuYXAoQS5hbHQoZmFiLCBnYWIpLCBmYSkgPC0+IEEuYWx0KEEuYXAoZmFiLCBmYSksIEEuYXAoZ2FiLCBmYSkpYFxuICogNS4gQW5uaWhpbGF0aW9uOiBgQS5hcCh6ZXJvLCBmYSkgPC0+IHplcm9gXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IEFsdCwgQWx0MSwgQWx0MiwgQWx0MkMsIEFsdDMsIEFsdDNDLCBBbHQ0LCBhbHRBbGwgYXMgYWx0QWxsXyB9IGZyb20gJy4vQWx0J1xuaW1wb3J0IHtcbiAgQXBwbGljYXRpdmUsXG4gIEFwcGxpY2F0aXZlMSxcbiAgQXBwbGljYXRpdmUyLFxuICBBcHBsaWNhdGl2ZTJDLFxuICBBcHBsaWNhdGl2ZTMsXG4gIEFwcGxpY2F0aXZlM0MsXG4gIEFwcGxpY2F0aXZlNFxufSBmcm9tICcuL0FwcGxpY2F0aXZlJ1xuaW1wb3J0IHsgSEtULCBLaW5kLCBLaW5kMiwgS2luZDMsIEtpbmQ0LCBVUklTLCBVUklTMiwgVVJJUzMsIFVSSVM0IH0gZnJvbSAnLi9IS1QnXG5pbXBvcnQgeyBaZXJvLCBaZXJvMSwgWmVybzIsIFplcm8yQywgWmVybzMsIFplcm8zQywgWmVybzQgfSBmcm9tICcuL1plcm8nXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIG1vZGVsXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0ZXJuYXRpdmU8Rj4gZXh0ZW5kcyBBcHBsaWNhdGl2ZTxGPiwgQWx0PEY+LCBaZXJvPEY+IHt9XG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0ZXJuYXRpdmUxPEYgZXh0ZW5kcyBVUklTPiBleHRlbmRzIEFwcGxpY2F0aXZlMTxGPiwgQWx0MTxGPiwgWmVybzE8Rj4ge31cblxuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBjbGFzc2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbHRlcm5hdGl2ZTI8RiBleHRlbmRzIFVSSVMyPiBleHRlbmRzIEFwcGxpY2F0aXZlMjxGPiwgQWx0MjxGPiwgWmVybzI8Rj4ge31cblxuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBjbGFzc2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbHRlcm5hdGl2ZTJDPEYgZXh0ZW5kcyBVUklTMiwgRT4gZXh0ZW5kcyBBcHBsaWNhdGl2ZTJDPEYsIEU+LCBBbHQyQzxGLCBFPiwgWmVybzJDPEYsIEU+IHt9XG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0ZXJuYXRpdmUzPEYgZXh0ZW5kcyBVUklTMz4gZXh0ZW5kcyBBcHBsaWNhdGl2ZTM8Rj4sIEFsdDM8Rj4sIFplcm8zPEY+IHt9XG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMTAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFsdGVybmF0aXZlM0M8RiBleHRlbmRzIFVSSVMzLCBFPiBleHRlbmRzIEFwcGxpY2F0aXZlM0M8RiwgRT4sIEFsdDNDPEYsIEU+LCBaZXJvM0M8RiwgRT4ge31cblxuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBjbGFzc2VzXG4gKiBAc2luY2UgMi4xMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0ZXJuYXRpdmU0PEYgZXh0ZW5kcyBVUklTND4gZXh0ZW5kcyBBcHBsaWNhdGl2ZTQ8Rj4sIEFsdDQ8Rj4sIFplcm80PEY+IHt9XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHV0aWxzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQHNpbmNlIDIuMTEuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWx0QWxsPEYgZXh0ZW5kcyBVUklTND4oXG4gIEY6IEFsdGVybmF0aXZlNDxGPlxuKTogPFMsIFIsIEUsIEE+KGFzOiBSZWFkb25seUFycmF5PEtpbmQ0PEYsIFMsIFIsIEUsIEE+PikgPT4gS2luZDQ8RiwgUywgUiwgRSwgQT5cbmV4cG9ydCBmdW5jdGlvbiBhbHRBbGw8RiBleHRlbmRzIFVSSVMzPihcbiAgRjogQWx0ZXJuYXRpdmUzPEY+XG4pOiA8UiwgRSwgQT4oYXM6IFJlYWRvbmx5QXJyYXk8S2luZDM8RiwgUiwgRSwgQT4+KSA9PiBLaW5kMzxGLCBSLCBFLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGIGV4dGVuZHMgVVJJUzMsIEU+KFxuICBGOiBBbHRlcm5hdGl2ZTNDPEYsIEU+XG4pOiA8UiwgQT4oYXM6IFJlYWRvbmx5QXJyYXk8S2luZDM8RiwgUiwgRSwgQT4+KSA9PiBLaW5kMzxGLCBSLCBFLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGIGV4dGVuZHMgVVJJUzI+KEY6IEFsdGVybmF0aXZlMjxGPik6IDxFLCBBPihhczogUmVhZG9ubHlBcnJheTxLaW5kMjxGLCBFLCBBPj4pID0+IEtpbmQyPEYsIEUsIEE+XG5leHBvcnQgZnVuY3Rpb24gYWx0QWxsPEYgZXh0ZW5kcyBVUklTMiwgRT4oXG4gIEY6IEFsdGVybmF0aXZlMkM8RiwgRT5cbik6IDxBPihhczogUmVhZG9ubHlBcnJheTxLaW5kMjxGLCBFLCBBPj4pID0+IEtpbmQyPEYsIEUsIEE+XG5leHBvcnQgZnVuY3Rpb24gYWx0QWxsPEYgZXh0ZW5kcyBVUklTPihGOiBBbHRlcm5hdGl2ZTE8Rj4pOiA8QT4oYXM6IFJlYWRvbmx5QXJyYXk8S2luZDxGLCBBPj4pID0+IEtpbmQ8RiwgQT5cbmV4cG9ydCBmdW5jdGlvbiBhbHRBbGw8Rj4oRjogQWx0ZXJuYXRpdmU8Rj4pOiA8QT4oYXM6IFJlYWRvbmx5QXJyYXk8SEtUPEYsIEE+PikgPT4gSEtUPEYsIEE+XG5leHBvcnQgZnVuY3Rpb24gYWx0QWxsPEY+KEY6IEFsdGVybmF0aXZlPEY+KTogPEE+KGFzOiBSZWFkb25seUFycmF5PEhLVDxGLCBBPj4pID0+IEhLVDxGLCBBPiB7XG4gIHJldHVybiBhbHRBbGxfKEYpKEYuemVybygpKVxufVxuIl19