"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fanIn = fanIn;
exports.fanin = fanin;
exports.split = split;
exports.splitChoice = splitChoice;

var _function = require("./function");

/**
 * The `Choice` class extends `Profunctor` with combinators for working with
 * sum types.
 *
 * `left` and `right` lift values in a `Profunctor` to act on the `Left` and
 * `Right` components of a sum, respectively.
 *
 * Looking at `Choice` through the intuition of inputs and outputs
 * yields the following type signature:
 *
 * ```purescript
 * left ::  forall input output a. p input output -> p (Either input a) (Either output a)
 * right :: forall input output a. p input output -> p (Either a input) (Either a output)
 * ```
 *
 * If we specialize the profunctor `p` to the `function` arrow, we get the following type
 * signatures:
 *
 * ```purescript
 * left ::  forall input output a. (input -> output) -> (Either input a) -> (Either output a)
 * right :: forall input output a. (input -> output) -> (Either a input) -> (Either a output)
 * ```
 *
 * When the `profunctor` is `Function` application, `left` allows you to map a function over the
 * left side of an `Either`, and `right` maps it over the right side (same as `map` would do).
 *
 * Adapted from https://github.com/purescript/purescript-profunctor/blob/master/src/Data/Profunctor/Choice.purs
 *
 * @since 2.0.0
 */
function split(P, C) {
  return function (pab, pcd) {
    return C.compose(P.right(pcd), P.left(pab));
  };
}
/**
 * Compose a value which eliminates a sum from two values, each eliminating
 * one side of the sum.
 *
 * This combinator is useful when assembling values from smaller components,
 * because it provides a way to support two different types of input.
 *
 * Specializing `fanIn` to function application would look like this:
 *
 * ```purescript
 * fanIn :: forall a b c d. (a -> c) -> (b -> c) -> Either a b -> c
 * ```
 *
 * We take two functions, `f` and `g`, which both return the same type `c` and we transform them into a
 * single function which takes an `Either` value with the parameter type of `f` on the left side and
 * the parameter type of `g` on the right side. The function then runs either `f` or `g`, depending on
 * whether the `Either` value is a `Left` or a `Right`.
 * This allows us to bundle two different computations which both have the same result type into one
 * function which will run the appropriate computation based on the parameter supplied in the `Either` value.
 *
 * @since 2.10.0
 */


function fanIn(P, C) {
  var splitPC = split(P, C);
  return function (pac, pbc) {
    return C.compose(P.promap(C.id(), function (cc) {
      return cc._tag === 'Left' ? cc.left : cc.right;
    }, _function.identity), splitPC(pac, pbc));
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use [`split`](#split) instead.
 *
 * @since 2.0.0
 * @deprecated
 */


function splitChoice(F) {
  return split(F, F);
}
/**
 * Use [`fanIn`](#fanIn) instead.
 *
 * @since 2.0.0
 * @deprecated
 */


function fanin(F) {
  return fanIn(F, F);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,