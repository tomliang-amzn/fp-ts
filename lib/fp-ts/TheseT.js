"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ap = ap;
exports.bimap = bimap;
exports.both = both;
exports.chain = chain;
exports.getTheseM = getTheseM;
exports.left = left;
exports.leftF = leftF;
exports.map = map;
exports.mapLeft = mapLeft;
exports.match = match;
exports.matchE = matchE;
exports.right = right;
exports.rightF = rightF;
exports.swap = swap;
exports.toTuple2 = toTuple2;

var _Apply = require("./Apply");

var _function = require("./function");

var _Functor = require("./Functor");

var T = _interopRequireWildcard(require("./These"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @since 2.4.0
 */
var These = T.These;
/**
 * @since 2.10.0
 */

function right(F) {
  return (0, _function.flow)(T.right, F.of);
}
/**
 * @since 2.10.0
 */


function left(F) {
  return (0, _function.flow)(T.left, F.of);
}
/**
 * @since 2.10.0
 */


function both(F) {
  return (0, _function.flow)(T.both, F.of);
}
/**
 * @since 2.10.0
 */


function rightF(F) {
  return function (fa) {
    return F.map(fa, T.right);
  };
}
/**
 * @since 2.10.0
 */


function leftF(F) {
  return function (fe) {
    return F.map(fe, T.left);
  };
}
/**
 * @since 2.10.0
 */


function map(F) {
  return (0, _Functor.map)(F, T.Functor);
}
/**
 * @since 2.10.0
 */


function ap(F, S) {
  return (0, _Apply.ap)(F, T.getApply(S));
}
/**
 * @since 2.10.0
 */


function chain(M, S) {
  var _left = left(M);

  return function (f) {
    return function (ma) {
      return M.chain(ma, T.match(_left, f, function (e1, a) {
        return M.map(f(a), T.match(function (e2) {
          return T.left(S.concat(e1, e2));
        }, function (b) {
          return T.both(e1, b);
        }, function (e2, b) {
          return T.both(S.concat(e1, e2), b);
        }));
      }));
    };
  };
}
/**
 * @since 2.10.0
 */


function bimap(F) {
  return function (f, g) {
    return function (fea) {
      return F.map(fea, T.bimap(f, g));
    };
  };
}
/**
 * @since 2.10.0
 */


function mapLeft(F) {
  return function (f) {
    return function (fea) {
      return F.map(fea, T.mapLeft(f));
    };
  };
}
/**
 * @since 2.10.0
 */


function match(F) {
  return function (onLeft, onRight, onBoth) {
    return function (ma) {
      return F.map(ma, T.match(onLeft, onRight, onBoth));
    };
  };
}
/**
 * @since 2.10.0
 */


function matchE(M) {
  return function (onLeft, onRight, onBoth) {
    return function (ma) {
      return M.chain(ma, T.match(onLeft, onRight, onBoth));
    };
  };
}
/**
 * @since 2.10.0
 */


function swap(F) {
  return function (ma) {
    return F.map(ma, T.swap);
  };
}
/**
 * @since 2.10.0
 */


function toTuple2(F) {
  return function (e, a) {
    return function (fa) {
      return F.map(fa, T.toTuple2(e, a));
    };
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------
// tslint:disable: deprecation

/**
 * @category model
 * @since 2.4.0
 * @deprecated
 */


/** @deprecated */

/* istanbul ignore next */
function getTheseM(M) {
  var _map = map(M);

  var _bimap = bimap(M);

  var _mapLeft = mapLeft(M);

  var _fold = matchE(M);

  var _toTuple2 = toTuple2(M);

  var of = right(M);

  var mapT = function mapT(fa, f) {
    return (0, _function.pipe)(fa, _map(f));
  };

  return {
    map: mapT,
    bimap: function bimap(fea, f, g) {
      return (0, _function.pipe)(fea, _bimap(f, g));
    },
    mapLeft: function mapLeft(fea, f) {
      return (0, _function.pipe)(fea, _mapLeft(f));
    },
    fold: function fold(fa, onLeft, onRight, onBoth) {
      return (0, _function.pipe)(fa, _fold(onLeft, onRight, onBoth));
    },
    swap: swap(M),
    rightM: rightF(M),
    leftM: leftF(M),
    left: left(M),
    right: right(M),
    both: both(M),
    toTuple: function toTuple(fa, e, a) {
      return (0, _function.pipe)(fa, _toTuple2(function () {
        return e;
      }, function () {
        return a;
      }));
    },
    getMonad: function getMonad(S) {
      var _ap = ap(M, S);

      var _chain = chain(M, S);

      return {
        _E: undefined,
        map: mapT,
        of: of,
        ap: function ap(fab, fa) {
          return (0, _function.pipe)(fab, _ap(fa));
        },
        chain: function chain(ma, f) {
          return (0, _function.pipe)(ma, _chain(f));
        }
      };
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,