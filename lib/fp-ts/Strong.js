"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fanOut = fanOut;
exports.fanout = fanout;
exports.split = split;
exports.splitStrong = splitStrong;

var _function = require("./function");

/**
 * The `Strong` class extends `Profunctor` with combinators for working with product types.
 *
 * `first` and `second` lift values in a `Profunctor` to act on the first and second components of a tuple,
 * respectively.
 *
 * Another way to think about Strong is to piggyback on the intuition of
 * inputs and outputs.  Rewriting the type signature in this light then yields:
 *
 * ```purescript
 * first ::  forall input output a. p input output -> p (Tuple input a) (Tuple output a)
 * second :: forall input output a. p input output -> p (Tuple a input) (Tuple a output)
 * ```
 *
 * If we specialize the profunctor p to the function arrow, we get the following type
 * signatures, which may look a bit more familiar:
 *
 * ```purescript
 * first ::  forall input output a. (input -> output) -> (Tuple input a) -> (Tuple output a)
 * second :: forall input output a. (input -> output) -> (Tuple a input) -> (Tuple a output)
 * ```
 *
 * So, when the `profunctor` is `Function` application, `first` essentially applies your function
 * to the first element of a tuple, and `second` applies it to the second element (same as `map` would do).
 *
 * Adapted from https://github.com/purescript/purescript-profunctor/blob/master/src/Data/Profunctor/Strong.purs
 *
 * @since 2.0.0
 */
function split(S, C) {
  return function (pab, pcd) {
    return C.compose(S.second(pcd), S.first(pab));
  };
}
/**
 * Compose a value which introduces a tuple from two values, each introducing one side of the tuple.
 *
 * This combinator is useful when assembling values from smaller components, because it provides a way to support two
 * different types of output.
 *
 * Specializing `fanOut` to function application would look like this:
 *
 * ```purescript
 * fanOut :: forall a b c. (a -> b) -> (a -> c) -> (a -> (Tuple b c))
 * ```
 *
 * We take two functions, `f` and `g`, with the same parameter type and we transform them into a single function which
 * takes one parameter and returns a tuple of the results of running `f` and `g` on the parameter, respectively.  This
 * allows us to run two parallel computations on the same input and return both results in a tuple.
 *
 * @since 2.10.0
 */


function fanOut(S, C) {
  var splitSC = split(S, C);
  return function (pab, pac) {
    return C.compose(splitSC(pab, pac), S.promap(C.id(), _function.identity, function (a) {
      return [a, a];
    }));
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use [`split`](#split) instead.
 *
 * @since 2.0.0
 * @deprecated
 */


function splitStrong(F) {
  return split(F, F);
}
/**
 * Use [`fanOut`](#fanout) instead.
 *
 * @since 2.0.0
 * @deprecated
 */


function fanout(F) {
  return fanOut(F, F);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,