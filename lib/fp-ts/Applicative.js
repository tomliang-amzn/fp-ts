"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApplicativeComposition = getApplicativeComposition;
exports.getApplicativeMonoid = getApplicativeMonoid;

var _Apply = require("./Apply");

var _function = require("./function");

var _Functor = require("./Functor");

/**
 * The `Applicative` type class extends the `Apply` type class with a `of` function, which can be used to create values
 * of type `f a` from values of type `a`.
 *
 * Where `Apply` provides the ability to lift functions of two or more arguments to functions whose arguments are
 * wrapped using `f`, and `Functor` provides the ability to lift functions of one argument, `pure` can be seen as the
 * function which lifts functions of _zero_ arguments. That is, `Applicative` functors support a lifting operation for
 * any number of function arguments.
 *
 * Instances must satisfy the following laws in addition to the `Apply` laws:
 *
 * 1. Identity: `A.ap(A.of(a => a), fa) <-> fa`
 * 2. Homomorphism: `A.ap(A.of(ab), A.of(a)) <-> A.of(ab(a))`
 * 3. Interchange: `A.ap(fab, A.of(a)) <-> A.ap(A.of(ab => ab(a)), fab)`
 *
 * Note. `Functor`'s `map` can be derived: `A.map(x, f) = A.ap(A.of(f), x)`
 *
 * @since 2.0.0
 */
function getApplicativeMonoid(F) {
  var f = (0, _Apply.getApplySemigroup)(F);
  return function (M) {
    return {
      concat: f(M).concat,
      empty: F.of(M.empty)
    };
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------
// tslint:disable: deprecation

/**
 * @since 2.0.0
 * @deprecated
 */


/** @deprecated */
function getApplicativeComposition(F, G) {
  var map = (0, _Functor.getFunctorComposition)(F, G).map;

  var _ap = (0, _Apply.ap)(F, G);

  return {
    map: map,
    of: function of(a) {
      return F.of(G.of(a));
    },
    ap: function ap(fgab, fga) {
      return (0, _function.pipe)(fgab, _ap(fga));
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,