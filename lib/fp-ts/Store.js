"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicate = exports.URI = exports.Functor = exports.Comonad = void 0;
exports.experiment = experiment;
exports.map = exports.flap = exports.extract = exports.extend = void 0;
exports.peeks = peeks;
exports.seek = seek;
exports.seeks = seeks;
exports.store = void 0;

var _function = require("./function");

var _Functor = require("./Functor");

/**
 * @since 2.0.0
 */

/**
 * Reposition the focus at the specified position
 *
 * @since 2.0.0
 */
function seek(s) {
  return function (wa) {
    return {
      peek: wa.peek,
      pos: s
    };
  };
}
/**
 * Reposition the focus at the specified position, which depends on the current position
 *
 * @since 2.0.0
 */


function seeks(f) {
  return function (wa) {
    return {
      peek: wa.peek,
      pos: f(wa.pos)
    };
  };
}
/**
 * Extract a value from a position which depends on the current position
 *
 * @since 2.0.0
 */


function peeks(f) {
  return function (wa) {
    return wa.peek(f(wa.pos));
  };
}
/**
 * Extract a collection of values from positions which depend on the current position
 *
 * @since 2.0.0
 */


function experiment(F) {
  return function (f) {
    return function (wa) {
      return F.map(f(wa.pos), function (s) {
        return wa.peek(s);
      });
    };
  };
} // -------------------------------------------------------------------------------------
// non-pipeables
// -------------------------------------------------------------------------------------

/* istanbul ignore next */


var _map = function _map(fa, f) {
  return (0, _function.pipe)(fa, map(f));
};
/* istanbul ignore next */


var _extend = function _extend(wa, f) {
  return (0, _function.pipe)(wa, extend(f));
}; // -------------------------------------------------------------------------------------
// type class members
// -------------------------------------------------------------------------------------

/**
 * @category Extend
 * @since 2.0.0
 */


var extend = function extend(f) {
  return function (wa) {
    return {
      peek: function peek(s) {
        return f({
          peek: wa.peek,
          pos: s
        });
      },
      pos: wa.pos
    };
  };
};
/**
 * @category Extract
 * @since 2.6.2
 */


exports.extend = extend;

var extract = function extract(wa) {
  return wa.peek(wa.pos);
};
/**
 * Derivable from `Extend`.
 *
 * @category combinators
 * @since 2.0.0
 */


exports.extract = extract;
var duplicate = /*#__PURE__*/extend(_function.identity);
/**
 * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
 * use the type constructor `F` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */

exports.duplicate = duplicate;

var map = function map(f) {
  return function (fa) {
    return {
      peek: function peek(s) {
        return f(fa.peek(s));
      },
      pos: fa.pos
    };
  };
}; // -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------

/**
 * @category instances
 * @since 2.0.0
 */


exports.map = map;
var URI = 'Store';
/**
 * @category instances
 * @since 2.0.0
 */

exports.URI = URI;

/**
 * @category instances
 * @since 2.7.0
 */
var Functor = {
  URI: URI,
  map: _map
};
/**
 * Derivable from `Functor`.
 *
 * @category combinators
 * @since 2.10.0
 */

exports.Functor = Functor;
var flap = /*#__PURE__*/(0, _Functor.flap)(Functor);
/**
 * @category instances
 * @since 2.7.0
 */

exports.flap = flap;
var Comonad = {
  URI: URI,
  map: _map,
  extend: _extend,
  extract: extract
}; // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------

/**
 * Use small, specific instances instead.
 *
 * @category instances
 * @since 2.0.0
 * @deprecated
 */

exports.Comonad = Comonad;
var store = Comonad;
exports.store = store;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,