"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.altAll = altAll;

/**
 * The `Alt` type class identifies an associative operation on a type constructor.  It is similar to `Semigroup`, except
 * that it applies to types of kind `* -> *`, like `Array` or `Option`, rather than concrete types like `string` or
 * `number`.
 *
 * `Alt` instances are required to satisfy the following laws:
 *
 * 1. Associativity: `A.alt(A.alt(fa, ga), ha) <-> A.alt(fa, A.alt(ga, ha))`
 * 2. Distributivity: `A.map(A.alt(fa, ga), ab) <-> A.alt(A.map(fa, ab), A.map(ga, ab))`
 *
 * @since 2.0.0
 */
// -------------------------------------------------------------------------------------
// model
// -------------------------------------------------------------------------------------

/**
 * @category type classes
 * @since 2.0.0
 */

/**
 * @category type classes
 * @since 2.0.0
 */

/**
 * @category type classes
 * @since 2.0.0
 */

/**
 * @category type classes
 * @since 2.0.0
 */

/**
 * @category type classes
 * @since 2.0.0
 */

/**
 * @category type classes
 * @since 2.2.0
 */

/**
 * @category type classes
 * @since 2.0.0
 */
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * @since 2.11.0
 */
function altAll(F) {
  return function (startWith) {
    return function (as) {
      return as.reduce(function (acc, a) {
        return F.alt(acc, function () {
          return a;
        });
      }, startWith);
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcC10cy9BbHQudHMiXSwibmFtZXMiOlsiYWx0QWxsIiwiRiIsInN0YXJ0V2l0aCIsImFzIiwicmVkdWNlIiwiYWNjIiwiYSIsImFsdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFvQk8sU0FBU0EsTUFBVCxDQUFtQkMsQ0FBbkIsRUFBd0c7QUFDN0csU0FBTyxVQUFDQyxTQUFEO0FBQUEsV0FBZSxVQUFDQyxFQUFEO0FBQUEsYUFBUUEsRUFBRSxDQUFDQyxNQUFILENBQVUsVUFBQ0MsR0FBRCxFQUFNQyxDQUFOO0FBQUEsZUFBWUwsQ0FBQyxDQUFDTSxHQUFGLENBQU1GLEdBQU4sRUFBVztBQUFBLGlCQUFNQyxDQUFOO0FBQUEsU0FBWCxDQUFaO0FBQUEsT0FBVixFQUEyQ0osU0FBM0MsQ0FBUjtBQUFBLEtBQWY7QUFBQSxHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBgQWx0YCB0eXBlIGNsYXNzIGlkZW50aWZpZXMgYW4gYXNzb2NpYXRpdmUgb3BlcmF0aW9uIG9uIGEgdHlwZSBjb25zdHJ1Y3Rvci4gIEl0IGlzIHNpbWlsYXIgdG8gYFNlbWlncm91cGAsIGV4Y2VwdFxuICogdGhhdCBpdCBhcHBsaWVzIHRvIHR5cGVzIG9mIGtpbmQgYCogLT4gKmAsIGxpa2UgYEFycmF5YCBvciBgT3B0aW9uYCwgcmF0aGVyIHRoYW4gY29uY3JldGUgdHlwZXMgbGlrZSBgc3RyaW5nYCBvclxuICogYG51bWJlcmAuXG4gKlxuICogYEFsdGAgaW5zdGFuY2VzIGFyZSByZXF1aXJlZCB0byBzYXRpc2Z5IHRoZSBmb2xsb3dpbmcgbGF3czpcbiAqXG4gKiAxLiBBc3NvY2lhdGl2aXR5OiBgQS5hbHQoQS5hbHQoZmEsIGdhKSwgaGEpIDwtPiBBLmFsdChmYSwgQS5hbHQoZ2EsIGhhKSlgXG4gKiAyLiBEaXN0cmlidXRpdml0eTogYEEubWFwKEEuYWx0KGZhLCBnYSksIGFiKSA8LT4gQS5hbHQoQS5tYXAoZmEsIGFiKSwgQS5tYXAoZ2EsIGFiKSlgXG4gKlxuICogQHNpbmNlIDIuMC4wXG4gKi9cbmltcG9ydCB7IExhenkgfSBmcm9tICcuL2Z1bmN0aW9uJ1xuaW1wb3J0IHsgRnVuY3RvciwgRnVuY3RvcjEsIEZ1bmN0b3IyLCBGdW5jdG9yMkMsIEZ1bmN0b3IzLCBGdW5jdG9yM0MsIEZ1bmN0b3I0IH0gZnJvbSAnLi9GdW5jdG9yJ1xuaW1wb3J0IHsgSEtULCBLaW5kLCBLaW5kMiwgS2luZDMsIEtpbmQ0LCBVUklTLCBVUklTMiwgVVJJUzMsIFVSSVM0IH0gZnJvbSAnLi9IS1QnXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIG1vZGVsXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0PEY+IGV4dGVuZHMgRnVuY3RvcjxGPiB7XG4gIHJlYWRvbmx5IGFsdDogPEE+KGZhOiBIS1Q8RiwgQT4sIHRoYXQ6IExhenk8SEtUPEYsIEE+PikgPT4gSEtUPEYsIEE+XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0MTxGIGV4dGVuZHMgVVJJUz4gZXh0ZW5kcyBGdW5jdG9yMTxGPiB7XG4gIHJlYWRvbmx5IGFsdDogPEE+KGZhOiBLaW5kPEYsIEE+LCB0aGF0OiBMYXp5PEtpbmQ8RiwgQT4+KSA9PiBLaW5kPEYsIEE+XG59XG5cbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgY2xhc3Nlc1xuICogQHNpbmNlIDIuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWx0MjxGIGV4dGVuZHMgVVJJUzI+IGV4dGVuZHMgRnVuY3RvcjI8Rj4ge1xuICByZWFkb25seSBhbHQ6IDxFLCBBPihmYTogS2luZDI8RiwgRSwgQT4sIHRoYXQ6IExhenk8S2luZDI8RiwgRSwgQT4+KSA9PiBLaW5kMjxGLCBFLCBBPlxufVxuXG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGNsYXNzZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFsdDJDPEYgZXh0ZW5kcyBVUklTMiwgRT4gZXh0ZW5kcyBGdW5jdG9yMkM8RiwgRT4ge1xuICByZWFkb25seSBhbHQ6IDxBPihmYTogS2luZDI8RiwgRSwgQT4sIHRoYXQ6IExhenk8S2luZDI8RiwgRSwgQT4+KSA9PiBLaW5kMjxGLCBFLCBBPlxufVxuXG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGNsYXNzZXNcbiAqIEBzaW5jZSAyLjAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFsdDM8RiBleHRlbmRzIFVSSVMzPiBleHRlbmRzIEZ1bmN0b3IzPEY+IHtcbiAgcmVhZG9ubHkgYWx0OiA8UiwgRSwgQT4oZmE6IEtpbmQzPEYsIFIsIEUsIEE+LCB0aGF0OiBMYXp5PEtpbmQzPEYsIFIsIEUsIEE+PikgPT4gS2luZDM8RiwgUiwgRSwgQT5cbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBjbGFzc2VzXG4gKiBAc2luY2UgMi4yLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbHQzQzxGIGV4dGVuZHMgVVJJUzMsIEU+IGV4dGVuZHMgRnVuY3RvcjNDPEYsIEU+IHtcbiAgcmVhZG9ubHkgYWx0OiA8UiwgQT4oZmE6IEtpbmQzPEYsIFIsIEUsIEE+LCB0aGF0OiBMYXp5PEtpbmQzPEYsIFIsIEUsIEE+PikgPT4gS2luZDM8RiwgUiwgRSwgQT5cbn1cblxuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBjbGFzc2VzXG4gKiBAc2luY2UgMi4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBbHQ0PEYgZXh0ZW5kcyBVUklTND4gZXh0ZW5kcyBGdW5jdG9yNDxGPiB7XG4gIHJlYWRvbmx5IGFsdDogPFMsIFIsIEUsIEE+KGZhOiBLaW5kNDxGLCBTLCBSLCBFLCBBPiwgdGhhdDogTGF6eTxLaW5kNDxGLCBTLCBSLCBFLCBBPj4pID0+IEtpbmQ0PEYsIFMsIFIsIEUsIEE+XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHV0aWxzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQHNpbmNlIDIuMTEuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWx0QWxsPEYgZXh0ZW5kcyBVUklTND4oXG4gIEY6IEFsdDQ8Rj5cbik6IDxTLCBSLCBFLCBBPihzdGFydFdpdGg6IEtpbmQ0PEYsIFMsIFIsIEUsIEE+KSA9PiAoYXM6IFJlYWRvbmx5QXJyYXk8S2luZDQ8RiwgUywgUiwgRSwgQT4+KSA9PiBLaW5kNDxGLCBTLCBSLCBFLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGIGV4dGVuZHMgVVJJUzM+KFxuICBGOiBBbHQzPEY+XG4pOiA8UiwgRSwgQT4oc3RhcnRXaXRoOiBLaW5kMzxGLCBSLCBFLCBBPikgPT4gKGFzOiBSZWFkb25seUFycmF5PEtpbmQzPEYsIFIsIEUsIEE+PikgPT4gS2luZDM8RiwgUiwgRSwgQT5cbmV4cG9ydCBmdW5jdGlvbiBhbHRBbGw8RiBleHRlbmRzIFVSSVMzLCBFPihcbiAgRjogQWx0M0M8RiwgRT5cbik6IDxSLCBBPihzdGFydFdpdGg6IEtpbmQzPEYsIFIsIEUsIEE+KSA9PiAoYXM6IFJlYWRvbmx5QXJyYXk8S2luZDM8RiwgUiwgRSwgQT4+KSA9PiBLaW5kMzxGLCBSLCBFLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGIGV4dGVuZHMgVVJJUzI+KFxuICBGOiBBbHQyPEY+XG4pOiA8RSwgQT4oc3RhcnRXaXRoOiBLaW5kMjxGLCBFLCBBPikgPT4gKGFzOiBSZWFkb25seUFycmF5PEtpbmQyPEYsIEUsIEE+PikgPT4gS2luZDI8RiwgRSwgQT5cbmV4cG9ydCBmdW5jdGlvbiBhbHRBbGw8RiBleHRlbmRzIFVSSVMyLCBFPihcbiAgRjogQWx0MkM8RiwgRT5cbik6IDxBPihzdGFydFdpdGg6IEtpbmQyPEYsIEUsIEE+KSA9PiAoYXM6IFJlYWRvbmx5QXJyYXk8S2luZDI8RiwgRSwgQT4+KSA9PiBLaW5kMjxGLCBFLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGIGV4dGVuZHMgVVJJUz4oXG4gIEY6IEFsdDE8Rj5cbik6IDxBPihzdGFydFdpdGg6IEtpbmQ8RiwgQT4pID0+IChhczogUmVhZG9ubHlBcnJheTxLaW5kPEYsIEE+PikgPT4gS2luZDxGLCBBPlxuZXhwb3J0IGZ1bmN0aW9uIGFsdEFsbDxGPihGOiBBbHQ8Rj4pOiA8QT4oc3RhcnRXaXRoOiBIS1Q8RiwgQT4pID0+IChhczogUmVhZG9ubHlBcnJheTxIS1Q8RiwgQT4+KSA9PiBIS1Q8RiwgQT5cbmV4cG9ydCBmdW5jdGlvbiBhbHRBbGw8Rj4oRjogQWx0PEY+KTogPEE+KHN0YXJ0V2l0aDogSEtUPEYsIEE+KSA9PiAoYXM6IFJlYWRvbmx5QXJyYXk8SEtUPEYsIEE+PikgPT4gSEtUPEYsIEE+IHtcbiAgcmV0dXJuIChzdGFydFdpdGgpID0+IChhcykgPT4gYXMucmVkdWNlKChhY2MsIGEpID0+IEYuYWx0KGFjYywgKCkgPT4gYSksIHN0YXJ0V2l0aClcbn1cbiJdfQ==