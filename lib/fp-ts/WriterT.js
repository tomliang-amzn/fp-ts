"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWriterM = getWriterM;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @since 2.4.0
 */
// TODO: remove module in v3

/**
 * @category model
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @category model
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @category model
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */

/**
 * @since 2.4.0
 */
function getWriterM(M) {
  var map = function map(fa, f) {
    return function () {
      return M.map(fa(), function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            a = _ref2[0],
            w = _ref2[1];

        return [f(a), w];
      });
    };
  };

  return {
    map: map,
    evalWriter: function evalWriter(fa) {
      return M.map(fa(), function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
            a = _ref4[0];

        return a;
      });
    },
    execWriter: function execWriter(fa) {
      return M.map(fa(), function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            _ = _ref6[0],
            w = _ref6[1];

        return w;
      });
    },
    tell: function tell(w) {
      return function () {
        return M.of([undefined, w]);
      };
    },
    listen: function listen(fa) {
      return function () {
        return M.map(fa(), function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
              a = _ref8[0],
              w = _ref8[1];

          return [[a, w], w];
        });
      };
    },
    pass: function pass(fa) {
      return function () {
        return M.map(fa(), function (_ref9) {
          var _ref10 = _slicedToArray(_ref9, 2),
              _ref10$ = _slicedToArray(_ref10[0], 2),
              a = _ref10$[0],
              f = _ref10$[1],
              w = _ref10[1];

          return [a, f(w)];
        });
      };
    },
    listens: function listens(fa, f) {
      return function () {
        return M.map(fa(), function (_ref11) {
          var _ref12 = _slicedToArray(_ref11, 2),
              a = _ref12[0],
              w = _ref12[1];

          return [[a, f(w)], w];
        });
      };
    },
    censor: function censor(fa, f) {
      return function () {
        return M.map(fa(), function (_ref13) {
          var _ref14 = _slicedToArray(_ref13, 2),
              a = _ref14[0],
              w = _ref14[1];

          return [a, f(w)];
        });
      };
    },
    getMonad: function getMonad(W) {
      return {
        _E: undefined,
        map: map,
        of: function of(a) {
          return function () {
            return M.of([a, W.empty]);
          };
        },
        ap: function ap(mab, ma) {
          return function () {
            return M.chain(mab(), function (_ref15) {
              var _ref16 = _slicedToArray(_ref15, 2),
                  f = _ref16[0],
                  w1 = _ref16[1];

              return M.map(ma(), function (_ref17) {
                var _ref18 = _slicedToArray(_ref17, 2),
                    a = _ref18[0],
                    w2 = _ref18[1];

                return [f(a), W.concat(w1, w2)];
              });
            });
          };
        },
        chain: function chain(ma, f) {
          return function () {
            return M.chain(ma(), function (_ref19) {
              var _ref20 = _slicedToArray(_ref19, 2),
                  a = _ref20[0],
                  w1 = _ref20[1];

              return M.map(f(a)(), function (_ref21) {
                var _ref22 = _slicedToArray(_ref21, 2),
                    b = _ref22[0],
                    w2 = _ref22[1];

                return [b, W.concat(w1, w2)];
              });
            });
          };
        }
      };
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,