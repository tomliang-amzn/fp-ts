"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.foldM = foldM;
exports.foldMap = foldMap;
exports.getFoldableComposition = getFoldableComposition;
exports.intercalate = intercalate;
exports.reduce = reduce;
exports.reduceM = reduceM;
exports.reduceRight = reduceRight;
exports.toArray = void 0;
exports.toReadonlyArray = toReadonlyArray;
exports.traverse_ = traverse_;

var _function = require("./function");

/**
 * @since 2.0.0
 */
function reduce(F, G) {
  return function (b, f) {
    return function (fga) {
      return F.reduce(fga, b, function (b, ga) {
        return G.reduce(ga, b, f);
      });
    };
  };
}
/**
 * `foldMap` composition.
 *
 * @category combinators
 * @since 2.10.0
 */


function foldMap(F, G) {
  return function (M) {
    var foldMapF = F.foldMap(M);
    var foldMapG = G.foldMap(M);
    return function (f) {
      return function (fga) {
        return foldMapF(fga, function (ga) {
          return foldMapG(ga, f);
        });
      };
    };
  };
}
/**
 * `reduceRight` composition.
 *
 * @category combinators
 * @since 2.10.0
 */


function reduceRight(F, G) {
  return function (b, f) {
    return function (fga) {
      return F.reduceRight(fga, b, function (ga, b) {
        return G.reduceRight(ga, b, f);
      });
    };
  };
} // -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * Similar to 'reduce', but the result is encapsulated in a monad.
 *
 * Note: this function is not generally stack-safe, e.g., for monads which build up thunks a la `IO`.
 *
 * @example
 * import { reduceM } from 'fp-ts/Foldable'
 * import { Monad, some } from 'fp-ts/Option'
 * import { make, Foldable } from 'fp-ts/Tree'
 * import { pipe } from 'fp-ts/function'
 *
 * const t = make(1, [make(2, []), make(3, []), make(4, [])])
 * assert.deepStrictEqual(pipe(t, reduceM(Monad, Foldable)(0, (b, a) => (a > 2 ? some(b + a) : some(b)))), some(7))
 *
 * @since 2.8.0
 */


function reduceM(M, F) {
  return function (b, f) {
    return function (fa) {
      return F.reduce(fa, M.of(b), function (mb, a) {
        return M.chain(mb, function (b) {
          return f(b, a);
        });
      });
    };
  };
} // TODO: curry in v3

/**
 * Fold a data structure, accumulating values in some `Monoid`, combining adjacent elements using the specified separator
 *
 * @example
 * import { intercalate } from 'fp-ts/Foldable'
 * import * as S from 'fp-ts/string'
 * import { make, Foldable } from 'fp-ts/Tree'
 *
 * const t = make('a', [make('b', []), make('c', []), make('d', [])])
 * assert.strictEqual(intercalate(S.Monoid, Foldable)('|', t), 'a|b|c|d')
 *
 * @since 2.0.0
 */


function intercalate(M, F) {
  return function (sep, fm) {
    var go = function go(_ref, x) {
      var init = _ref.init,
          acc = _ref.acc;
      return init ? {
        init: false,
        acc: x
      } : {
        init: false,
        acc: M.concat(M.concat(acc, sep), x)
      };
    };

    return F.reduce(fm, {
      init: true,
      acc: M.empty
    }, go).acc;
  };
}
/**
 * Transforms a `Foldable` into a `toReadonlyArray`.
 *
 * @example
 * import { toReadonlyArray } from 'fp-ts/Foldable'
 * import { Foldable, make } from 'fp-ts/Tree'
 *
 * const t = make(1, [make(2, []), make(3, []), make(4, [])])
 * assert.deepStrictEqual(toReadonlyArray(Foldable)(t), [1, 2, 3, 4])
 *
 * @since 2.10.0
 */


function toReadonlyArray(F) {
  return function (fa) {
    return F.reduce(fa, [], function (acc, a) {
      acc.push(a);
      return acc;
    });
  };
}
/**
 * Traverse a data structure, performing some effects encoded by an `Applicative` functor at each value, ignoring the
 * final result.
 *
 * @example
 * import { Foldable } from 'fp-ts/Array'
 * import { traverse_ } from 'fp-ts/Foldable'
 * import { Applicative } from 'fp-ts/IO'
 *
 * let log = ''
 * const append = (s: string) => () => (log += s)
 * traverse_(Applicative, Foldable)(['a', 'b', 'c'], append)()
 * assert.strictEqual(log, 'abc')
 *
 * @since 2.0.0
 */


function traverse_(M, F) {
  var applyFirst = function applyFirst(mu, mb) {
    return M.ap(M.map(mu, _function.constant), mb);
  };

  var mu = M.of(undefined);
  return function (fa, f) {
    return F.reduce(fa, mu, function (mu, a) {
      return applyFirst(mu, f(a));
    });
  };
} // -------------------------------------------------------------------------------------
// deprecated
// -------------------------------------------------------------------------------------
// tslint:disable: deprecation

/**
 * Use [`reduceM`](#reducem) instead
 *
 * @since 2.0.0
 * @deprecated
 */


function foldM(M, F) {
  return function (fa, b, f) {
    return F.reduce(fa, M.of(b), function (mb, a) {
      return M.chain(mb, function (b) {
        return f(b, a);
      });
    });
  };
}
/**
 * Use [`toReadonlyArray`](#toreadonlyarray) instead
 *
 * @since 2.8.0
 * @deprecated
 */


var toArray = toReadonlyArray;
/**
 * @since 2.0.0
 * @deprecated
 */

exports.toArray = toArray;

/** @deprecated */
function getFoldableComposition(F, G) {
  var _reduce = reduce(F, G);

  var _foldMap = foldMap(F, G);

  var _reduceRight = reduceRight(F, G);

  return {
    reduce: function reduce(fga, b, f) {
      return (0, _function.pipe)(fga, _reduce(b, f));
    },
    foldMap: function foldMap(M) {
      var foldMapM = _foldMap(M);

      return function (fga, f) {
        return (0, _function.pipe)(fga, foldMapM(f));
      };
    },
    reduceRight: function reduceRight(fga, b, f) {
      return (0, _function.pipe)(fga, _reduceRight(b, f));
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,