"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ap = ap;
exports.apFirst = apFirst;
exports.apS = apS;
exports.apSecond = apSecond;
exports.getApplySemigroup = getApplySemigroup;
exports.sequenceS = sequenceS;
exports.sequenceT = sequenceT;

var _function = require("./function");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function ap(F, G) {
  return function (fa) {
    return function (fab) {
      return F.ap(F.map(fab, function (gab) {
        return function (ga) {
          return G.ap(gab, ga);
        };
      }), fa);
    };
  };
}
/**
 * @category combinators
 * @since 2.10.0
 */


function apFirst(A) {
  return function (second) {
    return function (first) {
      return A.ap(A.map(first, function (a) {
        return function () {
          return a;
        };
      }), second);
    };
  };
}
/**
 * @category combinators
 * @since 2.10.0
 */


function apSecond(A) {
  return function (second) {
    return function (first) {
      return A.ap(A.map(first, function () {
        return function (b) {
          return b;
        };
      }), second);
    };
  };
}
/**
 * @category combinators
 * @since 2.10.0
 */


function apS(F) {
  return function (name, fb) {
    return function (fa) {
      return F.ap(F.map(fa, function (a) {
        return function (b) {
          return Object.assign({}, a, _defineProperty({}, name, b));
        };
      }), fb);
    };
  };
} // -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------

/**
 * Lift a semigroup into 'F', the inner values are concatenated using the provided `Semigroup`.
 *
 * @since 2.10.0
 */


function getApplySemigroup(F) {
  return function (S) {
    return {
      concat: function concat(first, second) {
        return F.ap(F.map(first, function (x) {
          return function (y) {
            return S.concat(x, y);
          };
        }), second);
      }
    };
  };
}

function curried(f, n, acc) {
  return function (x) {
    var combined = Array(acc.length + 1);

    for (var i = 0; i < acc.length; i++) {
      combined[i] = acc[i];
    }

    combined[acc.length] = x;
    return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);
  };
}

var tupleConstructors = {
  1: function _(a) {
    return [a];
  },
  2: function _(a) {
    return function (b) {
      return [a, b];
    };
  },
  3: function _(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  },
  4: function _(a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return [a, b, c, d];
        };
      };
    };
  },
  5: function _(a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return [a, b, c, d, e];
          };
        };
      };
    };
  }
};

function getTupleConstructor(len) {
  if (!tupleConstructors.hasOwnProperty(len)) {
    tupleConstructors[len] = curried(_function.tuple, len - 1, []);
  }

  return tupleConstructors[len];
}
/**
 * Tuple sequencing, i.e., take a tuple of monadic actions and does them from left-to-right, returning the resulting tuple.
 *
 * @example
 * import { sequenceT } from 'fp-ts/Apply'
 * import * as O from 'fp-ts/Option'
 *
 * const sequenceTOption = sequenceT(O.Apply)
 * assert.deepStrictEqual(sequenceTOption(O.some(1)), O.some([1]))
 * assert.deepStrictEqual(sequenceTOption(O.some(1), O.some('2')), O.some([1, '2']))
 * assert.deepStrictEqual(sequenceTOption(O.some(1), O.some('2'), O.none), O.none)
 *
 * @since 2.0.0
 */


function sequenceT(F) {
  return function () {
    var len = arguments.length;
    var f = getTupleConstructor(len);
    var fas = F.map(arguments.length <= 0 ? undefined : arguments[0], f);

    for (var i = 1; i < len; i++) {
      fas = F.ap(fas, i < 0 || arguments.length <= i ? undefined : arguments[i]);
    }

    return fas;
  };
}

function getRecordConstructor(keys) {
  var len = keys.length;

  switch (len) {
    case 1:
      return function (a) {
        return _defineProperty({}, keys[0], a);
      };

    case 2:
      return function (a) {
        return function (b) {
          var _ref2;

          return _ref2 = {}, _defineProperty(_ref2, keys[0], a), _defineProperty(_ref2, keys[1], b), _ref2;
        };
      };

    case 3:
      return function (a) {
        return function (b) {
          return function (c) {
            var _ref3;

            return _ref3 = {}, _defineProperty(_ref3, keys[0], a), _defineProperty(_ref3, keys[1], b), _defineProperty(_ref3, keys[2], c), _ref3;
          };
        };
      };

    case 4:
      return function (a) {
        return function (b) {
          return function (c) {
            return function (d) {
              var _ref4;

              return _ref4 = {}, _defineProperty(_ref4, keys[0], a), _defineProperty(_ref4, keys[1], b), _defineProperty(_ref4, keys[2], c), _defineProperty(_ref4, keys[3], d), _ref4;
            };
          };
        };
      };

    case 5:
      return function (a) {
        return function (b) {
          return function (c) {
            return function (d) {
              return function (e) {
                var _ref5;

                return _ref5 = {}, _defineProperty(_ref5, keys[0], a), _defineProperty(_ref5, keys[1], b), _defineProperty(_ref5, keys[2], c), _defineProperty(_ref5, keys[3], d), _defineProperty(_ref5, keys[4], e), _ref5;
              };
            };
          };
        };
      };

    default:
      return curried(function () {
        var r = {};

        for (var i = 0; i < len; i++) {
          r[keys[i]] = i < 0 || arguments.length <= i ? undefined : arguments[i];
        }

        return r;
      }, len - 1, []);
  }
}
/**
 * Like `Apply.sequenceT` but works with structs instead of tuples.
 *
 * @example
 * import * as E from 'fp-ts/Either'
 * import { sequenceS } from 'fp-ts/Apply'
 *
 * const ado = sequenceS(E.Apply)
 *
 * assert.deepStrictEqual(
 *   ado({
 *     a: E.right(1),
 *     b: E.right(true)
 *   }),
 *   E.right({ a: 1, b: true })
 * )
 * assert.deepStrictEqual(
 *   ado({
 *     a: E.right(1),
 *     b: E.left('error')
 *   }),
 *   E.left('error')
 * )
 *
 * @since 2.0.0
 */


function sequenceS(F) {
  return function (r) {
    var keys = Object.keys(r);
    var len = keys.length;
    var f = getRecordConstructor(keys);
    var fr = F.map(r[keys[0]], f);

    for (var i = 1; i < len; i++) {
      fr = F.ap(fr, r[keys[i]]);
    }

    return fr;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,